import time
import datetime
import random
import threading
import telebot
from telebot import types

bot = telebot.TeleBot('')

user_data = {}
user_staff = {}
user_work = {}
user_shop = {}
def update_stats():
    current_time = datetime.datetime.now()

    for user_id in user_data:
        last_update_time = user_data[user_id].get('last_update_time', current_time)
        time_difference = current_time - last_update_time

        if time_difference.total_seconds() >= 3600:
            user_data[user_id]['food'] = max(user_data[user_id]['food'] - 16, 0)
            user_data[user_id]['mood'] = max(user_data[user_id]['mood'] - 18, 0)
            user_data[user_id]['sleep'] = max(user_data[user_id]['sleep'] - 13, 0)
            user_data[user_id]['last_update_time'] = current_time

        if user_data[user_id]['food'] == 0:
            bot.send_message(user_id, "–¢–≤–æ–µ–π –∂–∞–±–∫–µ –ø–ª–æ—Ö–æ –±–µ–∑ –µ–¥—ã üê∏üçΩÔ∏è")
        if user_data[user_id]['mood'] == 0:
            bot.send_message(user_id, "–¢–≤–æ—è –∂–∞–±–∫–∞ –≥—Ä—É—Å—Ç–∏—Ç üò¢")
        if user_data[user_id]['sleep'] == 0:
            bot.send_message(user_id, "–¢–≤–æ—è –∂–∞–±–∫–∞ –æ—á–µ–Ω—å —É—Å—Ç–∞–ª–∞.. üò¥")

    threading.Timer(3600, update_stats).start()

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    button_start = types.InlineKeyboardButton(text='üê∏–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='start_game')
    markup.add(button_start)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!üåø –Ø - Froggo, –º–∞–ª–µ–Ω—å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥—á–æ—á–∏! '
                                      '\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —Å–≤–æ—é –∂–∞–±–∫—É, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \nüê∏–ù–∞—á–∞—Ç—å –ò–≥—Ä—É', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'start_game')
def start_game(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=" –û—Ç–ª–∏—á–Ω–æ! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–∞—Ç—å –∂–∞–±–∫–µ –∏–º—è:")
    bot.register_next_step_handler(call.message, create_frog)
def create_frog(message):
    frog_name = message.text
    user_data[message.from_user.id] = {
        'name': frog_name,
        'level': 1,
        'progress': 0,
        'food': 60,
        'mood': 40,
        'sleep': 90,
        'last_update_time': datetime.datetime.now()  #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
    user_staff[message.from_user.id] = {
        'üï∑': 5,
        'ü™≤': 5,
        'ü™±': 3,
        'üêõ': 1,
        'ü™∞': 0,
        'ü¶ã': 0,
        'üêû': 0
    }
    user_shop[message.from_user.id] = {
        'üíä': 0,
        'üß™': 0,
        'üç≤': 0,
        'üçï': 0,
        'üç£': 0,
        'üç´': 0
    }
    user_work[message.from_user.id] = {
        'üí∞': 500
    }

    bot.send_message(message.chat.id, f'–ñ–∞–±–∫–∞ {frog_name} —Å–æ–∑–¥–∞–Ω–∞! –£—Å–ø–µ—Ö–æ–≤!')
    update_stats()

@bot.message_handler(commands=['frog'])
def frog_stats(message):
    user_id = message.from_user.id
    if message.from_user.id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    markup = types.InlineKeyboardMarkup()
    feed_button = types.InlineKeyboardButton(text="ü™≤ –ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="feed")
    play_button = types.InlineKeyboardButton(text="üé≤ –ü–æ–∏–≥—Ä–∞—Ç—å", callback_data="play")
    markup.row(feed_button, play_button)
    sleep_button = types.InlineKeyboardButton(text="üí§ –°–ø–∞—Ç—å", callback_data="sleep")
    markup.row(sleep_button)
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAEBX7dlJFwD4OxjcC4ruIIXG8TWogABoEQAAgg8AAJHbiBJmJYxPAtIGRswBA')
    bot.send_message(message.chat.id,f"üê∏  –ò–º—è: {user_data[user_id]['name']}\n"
                                     f"‚ú®  –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%\n"
                                     f". . . . . . . . . . . . . . .\n\nüåø  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data[user_id]['mood']}%\n"
                                     f"ü™±  –ï–¥–∞: {user_data[user_id]['food']}%\nüí§  –°–æ–Ω: {user_data[user_id]['sleep']}%",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "sleep")
def sleep_frog(call):
    markup = types.InlineKeyboardMarkup()
    s_sleep = types.InlineKeyboardButton(text='3 —á–∞—Å–∞', callback_data='short_sleep')
    l_sleep = types.InlineKeyboardButton(text='7 —á–∞—Å–æ–≤', callback_data='long_sleep')
    markup.row(s_sleep, l_sleep)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
    markup.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="üí§<b> –°–æ–Ω</b>\n . . . . . . . . . . . . . . . \n\n<i>–°–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. \n"
                               "–û—Ç–ø—Ä–∞–≤—å –∂–∞–±–∫—É —Å–ø–∞—Ç—å –Ω–∞ \n3 —á–∞—Å–∞ (+40% —Å–Ω–∞) –∏–ª–∏ –Ω–∞ \n7 —á–∞—Å–æ–≤ (+100% —Å–Ω–∞)</i>",
                          parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "short_sleep")
def s_sleep(call):
    user_id = call.from_user.id
    if user_data[user_id]['sleep'] == 100:
        bot.answer_callback_query(callback_query_id=call.id, text='–ñ–∞–±–∞ –ø–æ–∫–∞ –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å...')
        return
    if call.from_user.id in user_data and 'sleep_return' in user_data[call.from_user.id]:
        bot.send_message(call.message.chat.id, "üí§ –¢–≤–æ—è –∂–∞–±–∫–∞ —É–∂–µ —Å–ø–∏—Ç")
        return
    if 'work_return' in user_data[call.from_user.id] or 'walk_return' in user_data[call.from_user.id]:
        bot.send_message(call.message.chat.id, "üí§ –¢–≤–æ—è –∂–∞–±–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ–º–∞")
        return

    current_time = datetime.datetime.now()
    return_time = current_time + datetime.timedelta(seconds=10800) #10800
    return_time_formatted = return_time.strftime("%H:%M")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üí§<b> –°–æ–Ω</b>\n . . . . . . . . . . . . . . . \n\n'
                               '<i>–¢–≤–æ—è –∂–∞–±–∫–∞ –ø—Ä–∏–ª–µ–≥–ª–∞\n–Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–µ—Ä–Ω–µ—Ç—Å—è\n'
                               '–∫ —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤..  </i>', parse_mode='html')
    bot.answer_callback_query(callback_query_id=call.id,
                              text="–ñ–∞–±–∫–∞ –ª–µ–≥–ª–∞ —Å–ø–∞—Ç—å :)")

    user_data[user_id]['sleep_return'] = return_time
    bot.send_message(call.message.chat.id, f"üí§ –ñ–∞–±–∫–∞ –ø—Ä–æ—Å–Ω–µ—Ç—Å—è –≤ {return_time_formatted}")
    time.sleep(10800)
    user_data[user_id]['sleep'] += 40
    user_data[user_id]['progress'] += 15
    user_data[user_id]['sleep'] = min(user_data[user_id]['sleep'], 100)

    if user_data[user_id]['progress'] >= 100:
        user_data[call.from_user.id]['level'] += 1
        user_data[call.from_user.id]['progress'] = 0
    bot.send_message(call.message.chat.id, f"–¢–≤–æ—è –∂–∞–±–∞ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å –∏ –ø–æ–ª–Ω–∞ —Å–∏–ª!"
                                           f"–£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")
    del user_data[user_id]['sleep_return']

@bot.callback_query_handler(func=lambda call: call.data == "long_sleep")
def l_sleep(call):
    user_id = call.from_user.id
    if user_data[user_id]['sleep'] == 100:
        bot.answer_callback_query(callback_query_id=call.id, text='–ñ–∞–±–∞ –ø–æ–∫–∞ –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å...')
        return
    if 'sleep_return' in user_data[call.from_user.id]:
        bot.send_message(call.message.chat.id, "üí§ –¢–≤–æ—è –∂–∞–±–∫–∞ —É–∂–µ —Å–ø–∏—Ç")
        return
    if 'work_return' in user_data[call.from_user.id] or 'walk_return' in user_data[call.from_user.id]:
        bot.send_message(call.message.chat.id, "üí§ –¢–≤–æ—è –∂–∞–±–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –¥–æ–º–∞")
        return

    current_time = datetime.datetime.now()
    return_time = current_time + datetime.timedelta(seconds=25200) #25200
    return_time_formatted = return_time.strftime("%H:%M")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üí§<b> –°–æ–Ω</b>\n . . . . . . . . . . . . . . . \n\n<i>–¢–≤–æ—è –∂–∞–±–∫–∞ –ø—Ä–∏–ª–µ–≥–ª–∞\n–Ω–µ–º–Ω–æ–≥–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–µ—Ä–Ω–µ—Ç—Å—è\n–∫ —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤..  </i>',
                          parse_mode='html')
    bot.answer_callback_query(callback_query_id=call.id,
                              text="–ñ–∞–±–∫–∞ –ª–µ–≥–ª–∞ —Å–ø–∞—Ç—å :)")

    user_data[user_id]['sleep_return'] = return_time
    bot.send_message(call.message.chat.id, f"üí§ –ñ–∞–±–∫–∞ –ø—Ä–æ—Å–Ω–µ—Ç—Å—è –≤ {return_time_formatted}")
    time.sleep(25200)
    user_data[user_id]['sleep'] += 100
    user_data[user_id]['progress'] += 25
    user_data[user_id]['sleep'] = min(user_data[user_id]['sleep'], 100)

    if user_data[user_id]['progress'] >= 100:
        user_data[call.from_user.id]['level'] += 1
        user_data[call.from_user.id]['progress'] = 0
    bot.send_message(call.message.chat.id, f"–¢–≤–æ—è –∂–∞–±–∞ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å –∏ –ø–æ–ª–Ω–∞ —Å–∏–ª! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")
    del user_data[user_id]['sleep_return']

@bot.callback_query_handler(func=lambda call: call.data == "play")
def play_with_frog(call):
    user_id = call.from_user.id
    if user_data[user_id]['mood'] == 100:
        bot.answer_callback_query(callback_query_id=call.id, text='–ñ–∞–±–∞ —É—Å—Ç–∞–ª–∞.. –ü–æ–∏–≥—Ä–∞–π —Å –Ω–µ–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ')
        return
    play_phrases = ["–í—ã –ø–æ—á–µ—Å–∞–ª–∏ –∂–∞–±–µ –±—Ä—é—à–∫–æ\n. . . . \n–û–Ω–∞ –¥–æ–≤–æ–ª—å–Ω–æ –ø–æ–º–∞—Ö–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º—ã–º —Ö–≤–æ—Å—Ç–æ–º",
                    "–í—ã –±—Ä–æ—Å–∏–ª–∏ –∂–∞–±–µ –ø–∞–ª–æ—á–∫—É\n. . . . \n–û–Ω–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –µ–µ –æ–±—Ä–∞—Ç–Ω–æ",
                    "–í—ã –≤–∫–ª—é—á–∏–ª–∏ –∂–∞–±–µ —Å–µ—Ä–∏–∞–ª\n. . . . \n–ï–µ –∑–∞—Ç—è–Ω—É–ª–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤",
                    "–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å –∂–∞–±–æ–π –≤ –ø—Ä—è—Ç–∫–∏\n. . . . \n–û–Ω–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞",
                    "–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å –∂–∞–±–æ–π –≤ –ø—Ä—è—Ç–∫–∏\n. . . . \n–û–Ω–∞ –≤—ã–∏–≥—Ä–∞–ª–∞"]
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Å–ø–∏—Å–∫–∞
    random_phrase = random.choice(play_phrases)
    bot.send_message(call.message.chat.id, text=random_phrase)

    user_data[user_id]['mood'] += 30
    user_data[user_id]['progress'] += 10
    user_data[user_id]['mood'] = min(user_data[user_id]['mood'], 100)

    if user_data[user_id]['progress'] >= 100:
        user_data[user_id]['level'] += 1
        user_data[user_id]['progress'] = 0

    bot.answer_callback_query(callback_query_id=call.id,
                              text=f"–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –∂–∞–±–∫–æ–π. –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | "
                                   f"{user_data[user_id]['progress']}%")
    bot.send_message(call.message.chat.id, "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∂–∞–±–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 30%")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–æ—Ä–º–∏—Ç—å
@bot.callback_query_handler(func=lambda call: call.data == "feed")
def feed_frog(call):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    food_buttons = []
    for item, count in user_staff[user_id].items():
        if count > 0:
            food_buttons.append(types.InlineKeyboardButton(text=item + f" {count}", callback_data="food_" + item))
    for item, count in user_shop[user_id].items():
        if count > 0:
            food_buttons.append(types.InlineKeyboardButton(text=item + f" {count}", callback_data="food_" + item))
    markup.add(*food_buttons)
    back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
    markup.row(back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏ –µ–¥—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ–¥–æ–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("food_"))
def feed_frog_food(call):
    user_id = call.from_user.id
    food_item = call.data.split("_")[1]
    if user_data[user_id]['food'] == 100:
        bot.answer_callback_query(callback_query_id=call.id, text='–ñ–∞–±–∞ –æ–±—ä–µ–ª–∞—Å—å... –ü–æ–∫–æ—Ä–º–∏ –µ–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ')
        return

    if food_item in user_staff[user_id] and user_staff[user_id][food_item] > 0:
        user_data[user_id]['progress'] += 10
        user_data[user_id]['food'] += 20
        user_staff[user_id][food_item] -= 1
        user_data[user_id]['food'] = min(user_data[user_id]['food'], 100)

        if user_data[user_id]['progress'] >= 100:
            user_data[user_id]['level'] += 1
            user_data[user_id]['progress'] = 0
        bot.answer_callback_query(callback_query_id=call.id,
                                  text=f"–ñ–∞–±–∫–∞ –ø–æ–µ–ª–∞! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")

    elif food_item in user_shop[user_id] and user_shop[user_id][food_item] > 0:
        user_data[user_id]['progress'] += 10
        user_shop[user_id][food_item] -= 1

        if food_item == "üíä":
            user_data[user_id]['food'] = 100
            user_data[user_id]['mood'] = 100
            user_data[user_id]['sleep'] = 100
            if user_data[user_id]['progress'] >= 100:
                user_data[user_id]['level'] += 1
                user_data[user_id]['progress'] = 0
            bot.answer_callback_query(callback_query_id=call.id,
                                      text=f"–ñ–∞–±–∫–∞ –ø–æ–µ–ª–∞! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")
            return

        if food_item == "üß™":
            user_data[user_id]['food'] = min(user_data[user_id]['food'] + 50, 100)
            user_data[user_id]['mood'] = min(user_data[user_id]['mood'] + 50, 100)
            user_data[user_id]['sleep'] = min(user_data[user_id]['sleep'] + 50, 100)

            if user_data[user_id]['progress'] >= 100:
                user_data[user_id]['level'] += 1
                user_data[user_id]['progress'] = 0
            bot.answer_callback_query(callback_query_id=call.id,
                                      text=f"–ñ–∞–±–∫–∞ –ø–æ–µ–ª–∞! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")
            return

        if food_item == "üç≤":
            user_data[user_id]['food'] = 100
            if user_data[user_id]['progress'] >= 100:
                user_data[user_id]['level'] += 1
                user_data[user_id]['progress'] = 0
            bot.answer_callback_query(callback_query_id=call.id,
                                      text=f"–ñ–∞–±–∫–∞ –ø–æ–µ–ª–∞! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")
            return

        if food_item == "üçï" or "üç£" or "üç´":
            user_data[user_id]['food'] += 20
            user_data[user_id]['food'] = min(user_data[user_id]['food'], 100)
            if user_data[user_id]['progress'] >= 100:
                user_data[user_id]['level'] += 1
                user_data[user_id]['progress'] = 0
            bot.answer_callback_query(callback_query_id=call.id,
                                      text=f"–ñ–∞–±–∫–∞ –ø–æ–µ–ª–∞! –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%")


    else:
        bot.answer_callback_query(callback_query_id=call.id, text=f"–£–ø—Å, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")

@bot.callback_query_handler(func=lambda call: call.data == "back")
def back_button(call):
    user_id = call.from_user.id
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id-1)

    markup = types.InlineKeyboardMarkup()
    feed_button = types.InlineKeyboardButton(text="ü™≤ –ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="feed")
    play_button = types.InlineKeyboardButton(text="üé≤ –ü–æ–∏–≥—Ä–∞—Ç—å", callback_data="play")
    markup.row(feed_button, play_button)
    sleep_button = types.InlineKeyboardButton(text="üí§ –°–ø–∞—Ç—å", callback_data="sleep")
    markup.row(sleep_button)
    bot.send_sticker(call.message.chat.id, sticker='CAACAgIAAxkBAAEBX7dlJFwD4OxjcC4ruIIXG8TWogABoEQAAgg8AAJHbiBJmJYxPAtIGRswBA')
    bot.send_message(call.message.chat.id,
                     f"üê∏  –ò–º—è: {user_data[user_id]['name']}\n‚ú®  –£—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['level']} | {user_data[user_id]['progress']}%\n"
                     f". . . . . . . . . . . . . . .\n\nüåø  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data[user_id]['mood']}%\nü™±  –ï–¥–∞: {user_data[user_id]['food']}%\n üí§  –°–æ–Ω: {user_data[user_id]['sleep']}%", reply_markup=markup)

@bot.message_handler(commands=['forest'])
def go_to_forest(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    if ('walk_return' in user_data[message.from_user.id] or
            'work_return' in user_data[message.from_user.id]):
        bot.send_message(message.chat.id, "–¢–≤–æ—è –∂–∞–±–∫–∞ —É–∂–µ –≥—É–ª—è–µ—Ç –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è!")
        return
    if 'sleep_return' in user_data[message.from_user.id]:
        bot.send_message(message.chat.id,
                         "üå≤ <b> –õ–µ—Å</b>\n. . . . . . . . . . . . . . .\n\n<i>üí§ –¢–≤–æ—è –∂–∞–±–∞ —Å–µ–π—á–∞—Å —Å–ø–∏—Ç</i>",
                         parse_mode='html')
        return
    if message.from_user.id in user_data and user_data[message.from_user.id]['sleep'] < 40:
        bot.send_message(message.chat.id,
                         "üå≤ <b> –õ–µ—Å</b>\n. . . . . . . . . . . . . . .\n\n"
                         "<i>–ñ–∞–±–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –±—ã \n—Å–µ–π—á–∞—Å –ø–æ—à–ª–∞ –≥—É–ª—è—Ç—å, \n–Ω–æ –æ–Ω–∞ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å.. </i>",
                         parse_mode='html')
        return
    markup = types.InlineKeyboardMarkup()
    walk_button = types.InlineKeyboardButton(text="üå≤ –ì—É–ª—è—Ç—å", callback_data="walk")
    markup.add(walk_button)
    bot.reply_to(message, f"üå≤ <b> –õ–µ—Å</b>\n"
                          f". . . . . . . . . . . . . . .\n\n"
                                      "<i>–û—Ç–ø—Ä–∞–≤—å –∂–∞–±–∫—É –≥—É–ª—è—Ç—å\n–≤ –ª–µ—Å–æ–∫ –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É. "
                          "–û–Ω–∞ –º–æ–∂–µ—Ç\n–Ω–∞–π—Ç–∏ —Ç–∞–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ\n—à—Ç—É—á–∫–∏!</i>", parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "walk")
def go_walk(call):
    user_data[call.from_user.id]['progress'] += 15
    if user_data[call.from_user.id]['progress'] >= 100:
        user_data[call.from_user.id]['level'] += 1
        user_data[call.from_user.id]['progress'] = 0

    current_time = datetime.datetime.now()
    return_time = current_time + datetime.timedelta(seconds=7200)
    return_time_formatted = return_time.strftime("%H:%M")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üå≤ <b> –õ–µ—Å</b>\n . . . . . . . . . . . . . . . \n\n'
                               '<i>–¢–≤–æ—è –∂–∞–±–∫–∞ –≥—É–ª—è–µ—Ç –∏ \n–≤–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!</i>', parse_mode='html')
    bot.answer_callback_query(callback_query_id=call.id,
                              text=f"–¢–≤–æ—è –∂–∞–±–∞ —Å–∫–æ—Ä–æ –∫ —Ç–µ–±–µ –≤–µ—Ä–Ω—ë—Ç—Å—è! "
                                   f"–£—Ä–æ–≤–µ–Ω—å: {user_data[call.from_user.id]['level']} | {user_data[call.from_user.id]['progress']}%")

    user_data[call.from_user.id]['walk_return'] = return_time
    bot.send_message(call.message.chat.id, f"<i>üí§ –ñ–∞–±–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –∏–∑ –ª–µ—Å–∞ –≤ {return_time_formatted}</i>", parse_mode='html')
    time.sleep(7200)
    found_items = random.sample(user_staff[call.from_user.id].items(), random.randint(1, 4))
    found_items_message = ("üè° –¢–≤–æ—è –∂–∞–±–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∏–∑ –ª–µ—Å–∞!\n"
                           "–°–º–æ—Ç—Ä–∏, —á—Ç–æ –æ–Ω–∞ –Ω–∞—à–ª–∞:\n\n")
    for item, count in found_items:
        found_count = random.randint(1, 5)
        user_staff[call.from_user.id][item] += found_count
        found_items_message += f"- {item.capitalize()}: {found_count}\n"
    bot.send_message(call.message.chat.id, found_items_message)
    del user_data[call.from_user.id]['walk_return']

@bot.message_handler(commands=['storage'])
def show_storage(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    storage_text = ("‚õ∫Ô∏è <b> –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</b>\n. . . . . . . . . . . . . . .\n\n")
    for item, count in user_work[user_id].items():
        storage_text += f"{item}: {count}\n"
    for item, count in user_staff[user_id].items():
        storage_text += f"{item}: {count}\n"
    for item, count in user_shop[user_id].items():
        storage_text += f"{item}: {count}\n"
    bot.reply_to(message, storage_text, parse_mode='html')

@bot.message_handler(commands=['work'])
def go_to_work(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    if message.from_user.id in user_data:
        if user_data[message.from_user.id]['level'] < 7:
            bot.send_message(message.chat.id,
                             "–¢–≤–æ—è –∂–∞–±–∫–∞ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è \n–¥–ª—è —Ä–∞–±–æ—Ç—ã, –ø–æ–¥–æ–∂–¥–∏ —Ö–æ—Ç—è –±—ã –¥–æ 7 —É—Ä–æ–≤–Ω—è^^ ")
            return
        if 'work_return' in user_data[message.from_user.id]:
            bot.send_message(message.chat.id, "–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, —Å —Ç–≤–æ–µ–π –∂–∞–±–æ–π \n–≤—Å–µ —Ö–æ—Ä–æ—à–æ, –æ–Ω–∞ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ—Ç—Å—è:)")
            return
        if 'sleep_return' in user_data[message.from_user.id]:
            bot.send_message(message.chat.id,
                             "üñ• <b> –†–∞–±–æ—Ç–∞</b>\n. . . . . . . . . . . . . . .\n\n<i>üí§ –¢–≤–æ—è –∂–∞–±–∞ —Å–µ–π—á–∞—Å —Å–ø–∏—Ç</i>",
                             parse_mode='html')
            return
        if 'walk_return' in user_data[message.from_user.id]:
            bot.send_message(message.chat.id,
                             "üñ• <b> –†–∞–±–æ—Ç–∞</b>\n. . . . . . . . . . . . . . .\n\n<i>üí§ –¢–≤–æ—è –∂–∞–±–∞ —Å–µ–π—á–∞—Å –≥—É–ª—è–µ—Ç</i>",
                             parse_mode='html')
            return
        if user_data[message.from_user.id]['sleep'] < 40:
            bot.send_message(message.chat.id,
                             "üñ• <b> –†–∞–±–æ—Ç–∞</b>\n. . . . . . . . . . . . . . .\n\n"
                             "<i>–¢–≤–æ—è –∂–∞–±–∫–∞ —É—Å—Ç–∞–ª–∞ \n–∏ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å, —Å–µ–π—á–∞—Å \n–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ \n–Ω–∞ —Ä–∞–±–æ—Ç—É :( </i>",
                             parse_mode='html')
            return
    markup = types.InlineKeyboardMarkup()
    work_button = types.InlineKeyboardButton(text="üñ• –†–∞–±–æ—Ç–∞—Ç—å", callback_data="work")
    markup.add(work_button)
    bot.reply_to(message, f"üñ• <b> –†–∞–±–æ—Ç–∞</b>\n"
                          f". . . . . . . . . . . . . . .\n\n"
                          "<i>–¢–≤–æ—è –∂–∞–±–∞ –ø–æ–¥—Ä–æ—Å–ª–∞ –∏ —Ç–µ–ø–µ—Ä—å\n—Å–∞–º–∞ –º–æ–∂–µ—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É\n–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏!</i>",
                 parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "work")
def work(call):
    user_data[call.from_user.id]['progress'] += 20
    if user_data[call.from_user.id]['progress'] >= 100:
        user_data[call.from_user.id]['level'] += 1
        user_data[call.from_user.id]['progress'] = 0

    current_time = datetime.datetime.now()
    return_time = current_time + datetime.timedelta(seconds=10800) #10800
    return_time_formatted = return_time.strftime("%H:%M")
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='üñ• <b> –†–∞–±–æ—Ç–∞ </b>\n . . . . . . . . . . . . . . . \n\n'
                               '<i>–¢–≤–æ—è –∂–∞–±–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞\n–∑–∞—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞... </i>',
                          parse_mode='html')
    bot.answer_callback_query(callback_query_id=call.id,
                              text=f"–¢–≤–æ—è –∂–∞–±–∞ —Å–∫–æ—Ä–æ –∫ —Ç–µ–±–µ –≤–µ—Ä–Ω—ë—Ç—Å—è!"
                                   f"–£—Ä–æ–≤–µ–Ω—å: {user_data[call.from_user.id]['level']} | {user_data[call.from_user.id]['progress']}%")

    user_data[call.from_user.id]['work_return'] = return_time
    bot.send_message(call.message.chat.id, f"üí§ –ñ–∞–±–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è —Å —Ä–∞–±–æ—Ç—ã –≤ {return_time_formatted}")
    time.sleep(10800)
    found_items = user_work[call.from_user.id].items()
    found_items_message = ("üè° –¢–≤–æ—è –∂–∞–±–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å —Ä–∞–±–æ—Ç—ã!\n"
                           "–°–º–æ—Ç—Ä–∏, —Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞:\n\n")
    for item, count in found_items:
        found_count = random.randint(20, 100)
        user_work[call.from_user.id][item] += found_count
        found_items_message += f"- {item.capitalize()}: {found_count}\n"
    bot.send_message(call.message.chat.id, found_items_message)
    del user_data[call.from_user.id]['work_return']

@bot.callback_query_handler(func=lambda call: call.data == "backs")
def back_to_shop(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    markup = types.InlineKeyboardMarkup()
    pill_button = types.InlineKeyboardButton(text="üíä –∑–∞ 800üí∞", callback_data="item_pill")
    potion_button = types.InlineKeyboardButton(text="üß™ –∑–∞ 499üí∞", callback_data="item_potion")
    markup.row(pill_button, potion_button)
    soup_button = types.InlineKeyboardButton(text="üç≤ –∑–∞ 300üí∞", callback_data="item_soup")
    pizza_button = types.InlineKeyboardButton(text="üçï –∑–∞ 150üí∞", callback_data="item_pizza")
    markup.row(soup_button, pizza_button)
    sushi_button = types.InlineKeyboardButton(text="üç£ –∑–∞ 150üí∞", callback_data="item_sushi")
    choco_button = types.InlineKeyboardButton(text="üç´ –∑–∞ 150üí∞", callback_data="item_choco")
    markup.row(sushi_button, choco_button)

    bot.send_message(call.message.chat.id, f"üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
                                      ". . . . . . . . . . . . . . .\n\n"
                                      "<i>–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å\n—Ä–∞–∑–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —à—Ç—É–∫–∏</i>", parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['shop'])
def shop(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    markup = types.InlineKeyboardMarkup()
    pill_button = types.InlineKeyboardButton(text="üíä –∑–∞ 800üí∞", callback_data="item_pill")
    potion_button = types.InlineKeyboardButton(text="üß™ –∑–∞ 499üí∞", callback_data="item_potion")
    markup.row(pill_button, potion_button)
    soup_button = types.InlineKeyboardButton(text="üç≤ –∑–∞ 300üí∞", callback_data="item_soup")
    pizza_button = types.InlineKeyboardButton(text="üçï –∑–∞ 150üí∞", callback_data="item_pizza")
    markup.row(soup_button, pizza_button)
    sushi_button = types.InlineKeyboardButton(text="üç£ –∑–∞ 150üí∞", callback_data="item_sushi")
    choco_button = types.InlineKeyboardButton(text="üç´ –∑–∞ 150üí∞", callback_data="item_choco")
    markup.row(sushi_button, choco_button)

    bot.send_message(message.chat.id, f"üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
                                      ". . . . . . . . . . . . . . .\n\n"
                                      "<i>–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å\n—Ä–∞–∑–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —à—Ç—É–∫–∏</i>", parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("item_"))
def item_descr(call):
    item = call.data.split("_")[1]
    description_message = ""
    if item == "pill":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n"
                                "<i>üíä - –í–æ–ª—à–µ–±–Ω–∞—è –ø–∏–ª—é–ª—è, \n–ø–æ–≤—ã—à–∞—é—â–∞—è –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n–∂–∞–±—ã –Ω–∞ 100%</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 800üí∞</i>")
    elif item == "potion":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n"
                                "<i>üß™ - –ù–µ–æ–±—ã—á–Ω–æ–µ –∑–µ–ª—å–µ, \n–ø–æ–≤—ã—à–∞—é—â–µ–µ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n–∂–∞–±—ã –Ω–∞ 50%</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 499üí∞</i>")
    elif item == "soup":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n"
                                "<i>üç≤ - –î–æ–º–∞—à–Ω–∏–π —Å—É–ø—á–∏–∫, \n–ø–æ–≤—ã—à–∞—é—â–∏–π —Å—ã—Ç–æ—Å—Ç—å –∂–∞–±–∫–∏ –Ω–∞ 100%</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 300üí∞</i>")
    elif item == "pizza":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n <i>üçï - –û–±—ã—á–Ω–∞—è –ø–∏—Ü—Ü–∞, \n–≤–∫—É—Å–Ω–∞—è, —Å—ã—Ç–Ω–∞—è, –∫–∞–ª–æ—Ä–∏–π–Ω–∞—è</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 150üí∞</i>")
    elif item == "sushi":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n"
                                "<i>üç£ - –†–æ–ª–ª—ã —Ñ–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è, \n–≤—ã–±–æ—Ä –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥—É—Ä–º–∞–Ω–æ–≤</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 150üí∞</i>")
    elif item == "choco":
        description_message = "üí∞ <b> –ú–∞–≥–∞–∑–∏–Ω</b>\n"
        description_message += (". . . . . . . . . . . . . . .\n\n"
                                "<i>üç´ - –ú–æ–ª–æ—á–Ω–∞—è —à–æ–∫–æ–ª–∞–¥–∫–∞, \n—Å–∞–º–æ–µ —Ç–æ, —á—Ç–æ–±—ã –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å \n—Å–≤–æ—é –∂–∞–±–∫—É</i>"
                                "\n\n. . . . . . . . . . . . . . .\n<i>–¶–µ–Ω–∞: 150üí∞</i>")

    markup = types.InlineKeyboardMarkup()
    buy_button = types.InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{item}")
    backs_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backs")
    markup.row(buy_button, backs_button)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=description_message, parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def buy_item(call):
    user_id = call.from_user.id
    item = call.data.split("_")[1]
    if item == "pill":
        if user_work[user_id]['üí∞'] >= 800:
            user_shop[user_id]['üíä'] += 1
            user_work[user_id]['üí∞'] -= 800
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")

    elif item == "potion":
        if user_work[user_id]['üí∞'] >= 499:
            user_shop[user_id]['üß™'] += 1
            user_work[user_id]['üí∞'] -= 499
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")

    elif item == "soup":
        if user_work[user_id]['üí∞'] >= 300:
            user_shop[user_id]['üç≤'] += 1
            user_work[user_id]['üí∞'] -= 300
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")

    elif item == "pizza":
        if user_work[user_id]['üí∞'] >= 150:
            user_shop[user_id]['üçï'] += 1
            user_work[user_id]['üí∞'] -= 150
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")

    elif item == "sushi":
        if user_work[user_id]['üí∞'] >= 150:
            user_shop[user_id]['üç£'] += 1
            user_work[user_id]['üí∞'] -= 150
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")

    elif item == "choco":
        if user_work[user_id]['üí∞'] >= 150:
            user_shop[user_id]['üç´'] += 1
            user_work[user_id]['üí∞'] -= 150
            bot.answer_callback_query(callback_query_id=call.id, text="–¢–æ–≤–∞—Ä —É–∂–µ —É —Ç–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–û–π, —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç–æ–∫...")\

@bot.message_handler(commands=['donate'])
def send_donate(message):
    if message.from_user.id not in user_data:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∂–∞–±–∫–∏ :(\n–°–æ–∑–¥–∞–π –µ–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return
    bot.reply_to(message, f"üîÆ <b> –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å</b>\n"
                          f". . . . . . . . . . . . . . .\n\n"
                          f"<i>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)</i>\n"
                          f"<code> 5536914159646789 </code>\n"
                          f". . . . . . . . . . . . . . .\n\n"
                          f"<i>–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç\n–±–æ—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è üíï</i>" ,parse_mode='html')

bot.polling(none_stop=True)